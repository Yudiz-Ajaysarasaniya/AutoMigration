using AutoMigration.repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using System.Diagnostics;

namespace AutoMigration_Api.Services
{
    public static class MigrationService
    {
        public static void ApplyMigrations(IServiceProvider services)
        {
            using (var scope = services.CreateScope())
            {
                var context = scope.ServiceProvider.GetRequiredService<AppDbContext>();
                var modelDiffer = context.GetService<IMigrationsModelDiffer>();
                var runtimeInitializer = context.GetService<IModelRuntimeInitializer>();
                var migrationsAssembly = context.GetService<IMigrationsAssembly>();

                //Checking for pending migrations
                var pendingMigrations = context.Database.GetPendingMigrations().ToList();

                if (pendingMigrations.Any())
                {
                    Console.WriteLine($"Found {pendingMigrations.Count} pending migrations. Applying now...");
                    context.Database.Migrate();
                    Console.WriteLine(" Database updated successfully!");
                    return;
                }

                // Get the current model
                var designTimeModel = context.GetService<IDesignTimeModel>().Model;
                var currentModel = (IRelationalModel)designTimeModel.GetRelationalModel();

                // Get last applied migration model
                IRelationalModel? lastModel = null;
                if (migrationsAssembly.ModelSnapshot?.Model != null)
                {
                    var finalizedModel = runtimeInitializer.Initialize(migrationsAssembly.ModelSnapshot.Model);
                    lastModel = (IRelationalModel)finalizedModel.GetRelationalModel();
                }

                // Find the schema differences
                var differences = modelDiffer.GetDifferences(lastModel, currentModel);

                if (differences.Any())
                {
                    // Changes detected create a new migration
                    string migrationName = $"AutoGeneratedMigration_{DateTime.Now:yyyyMMddHHmmss}";
                    if (!RunEfMigrationCommand(migrationName))
                    {
                        Console.WriteLine(" Failed to create migration.");
                        return;
                    }

                    //Create a new scope and use a fresh context instance before applying migrations
                    using (var newScope = services.CreateScope())
                    {
                        var newContext = newScope.ServiceProvider.GetRequiredService<AppDbContext>();

                        //Apply the new migration
                        newContext.Database.Migrate();
                        Console.WriteLine(" Database updated successfully!");
                    }
                }
                else
                {
                    Console.WriteLine(" No schema changes detected. Skipping migration creation.");
                }
            }
        }

        private static bool RunEfMigrationCommand(string migrationName)
        {
            var process = new Process()
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "dotnet",
                    Arguments = $"ef migrations add {migrationName} --project \"C:\\Yudiz\\Ajay_Sarasaniya\\My_Projects\\AutoMigration\\AutoMigration.repository\" --startup-project \"C:\\Yudiz\\Ajay_Sarasaniya\\My_Projects\\AutoMigration\\AutoMigration\" --no-build",
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    UseShellExecute = false,
                    CreateNoWindow = true,
                    WorkingDirectory = @"C:\Yudiz\Ajay_Sarasaniya\My_Projects\AutoMigration\AutoMigration"
                }
            };

            try
            {
                process.Start();
                string output = process.StandardOutput.ReadToEnd();
                string error = process.StandardError.ReadToEnd();
                process.WaitForExit();

                if (!string.IsNullOrEmpty(error))
                {
                    Console.WriteLine(" Migration Error:");
                    Console.WriteLine(error);
                }

                return process.ExitCode == 0;
            }
            catch (Exception ex)
            {
                Console.WriteLine($" Exception occurred: {ex.Message}");
                return false;
            }
        }
    }




}
